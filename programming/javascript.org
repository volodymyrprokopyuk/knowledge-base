* JavaScript language

** Types, coercion, and operators

- Types are related to values, not to variables. Variables can store values of
  different types over time
- The type of a value determines whether the value will be *assigned by copy*
  primitives =boolean=, =number=, =string=, =symbol=, or *assigned by reference*
  composites =array=, =object=, =function=, and automatically boxed values
- Coercion always results in one of the scalar primitive types
- *Implicit coercion* ~==~ and *strict comparison* ~===~ compare two objects *by
  reference*, not by value: src_js{ { a: 1 } ==(=) { a: 1 } // false }
- Use ~===~ strict comparison instead of ~==~ implicit coercion with primitives
  =true=, =false=, =0=, =""=, =[]=
- *Assignment expression* returns the assigned value src_js{ a = 1 // 1 }
- Right-associative: ~=~, ~?:~, =yield=
- src_js{ continue <label> } continues a labeled outer loop src_js{ label:
  while/for (...) }
- src_js{ break <label> } breaks out of an inner loop or a labeled block src_js{
  label: { ... } }
- Array indexing src_js{ for (let index; condition; increment) }
- Object properties src_js{ for (const property in object) }
- Iterator src_js{ for (const element of iterator) }
- =function= is a callable =object=
- *Guarded operation* src_js{ let a = b || <default> }
- *Short circuiting* src_js{ a && a.b() }
- =symbol= a special unique primitive type used for *collision-free properties**
  on objects
  #+BEGIN_SRC js
const sym = Symbol("a")
const o = { [sym]: 1 }
console.log(o[sym]) // 1, collision-free property

function Singleton() {
  // const instance = Symbol("instance")
  const instance = Symbol.for("singleton.instance") // Symbol registry
  if (!Singleton[instance]) {
    this.a = 1
    Singleton[instance] = this
  }
  return Singleton[instance]
}
const s1 = new Singleton()
const s2 = new Singleton()
console.log(s1, s2, s1 === s2, new Number(1) === new Number(1))
// Singleton { a: 1 }, Singleton { a: 1 }, true, false
  #+END_SRC
- *Tagged template literal*
  #+BEGIN_SRC js
function tag(strings, ...values) {
  return `${strings[1].trim()} ${values[0] + 1} ${strings[0]}`
}
const a = 1
console.log(tag`A ${a + 1} B`) // B 3 A
  #+END_SRC
- =RegExp= sticky =y= flag restricts the pattern to match just at the position
  of the =lastIndex= which is set to the next character beyond the end of the
  previous match. =y= flag implies a virtual anchor at the beginning of the
  pattern vs non-sticky patterns are free to move ahead in their matching

** Object property descriptor and accessor descriptor

- *Type* vs =object=
  #+BEGIN_SRC js
const s = "a" // string type, immutable value, automatic coercion to object
console.log(typeof s, s instanceof String) // string, false
const s2 = new String("a") // String object, allows operations
console.log(typeof s2, s2 instanceof String) // object, true
  #+END_SRC
- =object= is a container for named references to properties (values, objects,
  and functions). Functions never belong to objects. Syntactic property access
  ~o.p~ vs programmatic property access ~o["p"]~
  #+BEGIN_SRC js
const o = { a: 1 }
console.log("a" in o) // true
for (const p in o) { console.log(p, o[p]) } // a 1
delete o.a
console.log(o) // { }
  #+END_SRC
- *Property descriptor* vs *accessor descriptor**
  #+BEGIN_SRC js
const o = { }
Object.defineProperty( // property descriptor
  o, "a", { value: 1, writable: true, enumerable: true, configurable: true }
)
o.a = 2
console.log(o.a) // 2

const o = { }
Object.defineProperty(o, "a", { // accessor descriptor
  set: function(v) { this._a = v },
  get: function() { return this._a * 2 }
})
o.a = 1
console.log(o.a) // 2

const o = { // object literal setter and getter
  set a(v) { this._a = v },
  get a() { return this._a * 2 }
}
o.a = 1
console.log(o.a) // 2

class C { // class setter and getter
  set a(v) { this._a = v }
  get a() { return this._a * 2 }
}
const c = new C()
c.a = 1
console.log(c.a) // 2
  #+END_SRC
- =Get= read lookup: own property lookup, then prototype chain lookup, then
  return =undefined=
- =Put= write lookup: accessor descriptor =set=, then property descriptor
  =writable=, then prototype chain lookup, then assign value directly to the
  object
- Object immutability =Object.preventExtensions()=, =Object.seal()=,
  =Object.freeze()=
- *Object concise method* src_js{ { f: function() { ... } } } becomes src_js{ {
  f() { ... } }= } implies anonymous function expression

** Lexical scope, closures, and variable lookup

- *JS pipeline* stateless tokenization, then stateful lexing, then parsing
  yields AST with a per-scope hoisting of variables and functions, then
  optimization, then JIT code generation, then execution performs variable
  assignments and function calls
- *Compiler* is the code generator that performs the variable creation in the
  appropriate scope
- *Engine* is the orchestrator that performs the variable lookup for the
  variable/parameter assignment (LHS container) and the variable/parameter
  referencing (RHS value)
- *Scope* is the storage tree for variables that manages storage and referencing
  of variable, shadowing
- *Lexical scope* (closures) is defined statically at write-time, the scope
  chain is based on the *source code*
- *Closure* a returned function that can access its lexical scope even when the
  function is executing outside its lexical scope
- *Dynamic scope* =this= is defined at execution-time and depends on the
  execution path, the scope chain is based on a *call stack*
- *Block scope* =const=, =let= declare variables as close as possible to where
  they are used
    - =var= function scope and hoisting of variables and functions
    - Function declarations are hoisted before variable declarations
    - =const/let= block scope at any ~{ ... }~ even explicitly defined
    - =let= block scoped variable vs =var= function scoped + hoisting
    - =const= block scoped variable that must be initialized and cannot be
      reassigned (a constant reference), while the content of the reference
      types can still be modified
    - ~try/catch(e)~ block scope
- *Module pattern* a function creates a new nested function scope not
  accessible from the outside
  #+BEGIN_SRC js
function module(a) {
  let b = a // private state
  function f() { return ++b } // closure over the private state
  return { f } // public interface
}
const m = module(10) // module instance
console.log(m.f()) // 11
  #+END_SRC

** =this= late binding, lexical =this=, and arrow functions

- =this= is dynamically defined for every function call at runtime (the late
  binding, not the write-time lexical scope). The value of =this= depends on the
  location of the function call (not the location of the function declaration)
  and how a function is called. =this= implicitly passes the execution context
  object (like the dynamic scope) to a function
- Late binding rules for =this= (from the highest to the lowest precedence)
  - =new= *binding* a construction call of a function with the =new=
    operator src_js{ new f() }. =this= points to a brand new object, which is
    automatically returned from the function, unless the function returns
    another object. The =new= operator ignores =this= hard binding with
    =bind()=
  - *Explicit binding* is the function invocation through src_js{ f.call(this,
    args, ...) } or src_js{ f.apply(this, [args]) } including the *hard
    binding* src_js{ const ff = f.bind(this, args, ...) } for partial
    application, currying. =this= points to the first argument
  - *Implicit binding* is the function invocation src_js{ o.f() } through a
    containing context object src_js{ const o = { f } }. =this= points to the
    containing context object
  - *Default binding* is the standalone function invocation src_js{ f() }
    including callback invocation. =this= is =undefined= as the global object is
    not eligible for the default binding in the =strict mode=
- *Lexical this* (=bind= alternative) is the *arrow function* src_js{ (async)
  (...) => { ... } } discards all the traditional rules for =this= binding and
  instead uses the lexical =this= from the *immediate lexical enclosing scope*.
  The arrow function is the syntactic replacement for src_js{ const self = this }
  closures. Lexical =this= binding of the arrow function cannot be overridden
  even with the =new= operator
- *Arrow function* is an *anonymous function expression* that supports
  parameters destructuring, default values, and the spread/gather operator. The
  arrow function has no named reference for recursion or event bind/unbind.
  Inside the arrow function =this= is lexical, not dynamic. The arrow function
  is a nicer alternative to src_js{ const self = this } or src_js{
  f.bind(this) }. There is no named arrow function declaration

** Prototype chain, prototypal inheritance, and =class=

- *Prototype chain* every object has the ~o.prototype~ link to another object
  ending at ~Object.prototype~
  #+BEGIN_SRC js
const o = { a: 1 }
// new object o2.prototype = o (prototype chain)
const o2 = Object.create(o)
console.log("a" in o2, o2.a) // true, 1
for (const p in o2) { console.log(p, o2[p]) } // a, 1
  #+END_SRC
- *Prototypal inheritance* all functions get by default a public, non-enumerable
  property ~F.prototype~ pointing to an object. Each object created via `src_js{
  new F() } operator is linked to the ~F.prototype~ effectively delegating
  access to ~F.prototype~ properties
  #+BEGIN_SRC js
function F() { this.a = 1 } // constructor, property
F.prototype.b = function() { return 2 } // method
const o = new F()
console.log(o.a, o.b()) // 1, 2
function G() { F.call(this); this.c = 3 } // call parent constructor
// Prototypal inheritance Option 1. Overwrite G.prototype
G.prototype = Object.create(F.prototype)
// Prototypal inheritance Option 2. Update G.prototype
Object.setPrototypeOf(G.prototype, F.prototype)
G.prototype.d = function() {
  return F.prototype.b.call(this) + 2 // call parent method
}
const o2 = new G()
console.log(o2.a, o2.b(), o2.c, o2.d()) // 1, 2, 3, 4
  #+END_SRC
- Purely flat data storage without the prototype delegation src_js{ o =
  Object.create(null) }
- *Prototypal behavior delegation* objects are linked to other objects forming a
  network of peers, not a vertical hierarchy as with classes
- Mutual delegation of two objects to each other forming a cycle is disallowed
- =class= is the syntactic sugar on top of the prototypal inheritance and
  prototypal behavior delegation
  #+BEGIN_SRC js
class F {
  constructor() { this.a = 1 } // constructor, property
  b() { return 2 } // method
}
const o = new F()
console.log(o.a, o.b()) // 1, 2
class G extends F { // prototypal inheritance
  constructor() { super(); this.c = 3 } // call parent constructor
  d() { return super.b() + 2 } // call parent method
}
const o2 = new G()
console.log(o2.a, o2.b(), o2.c, o2.d()) // 1, 2, 3, 4

class A {
  constructor(a) { this._a = a } // property
  // property setter and getter
  set a(v) { this._a = v }
  get a() { return this._a }
}
class B extends A { // prototypal inheritance
  constructor(a, b) {
    super(a) // parent constructor
    this.b = b
  }
  // statics are on the constructor function, not the prototype
  static c = 10
  sum() { return super.a + this.b } // parent object
}
const b = new B(1, 2)
b.a += 3
console.log(b.a, b.sum(), B.c) // 4, 6, 10
  #+END_SRC
- *Method chaining* via src_js{ return this }
  #+BEGIN_SRC js
function N(x) { this.a = x }
N.prototype.add = function add(x) { this.a += x; return this }
console.log(new N(1).add(2).add(3).a) // 6
  #+END_SRC

** Spread/gather, object/array destructuring/transformation

- *Spread arguments* src_js{ f.apply(null, [1, 2, 3]) } becomes src_js{ f(...[1,
  2, 3]) }
- *Gather parameters* src_js{ function f(...args) { ... } } becomes ~[args]~
- *Object/array destructuring/transformation**
  #+BEGIN_SRC js
const o = { a: 1, b: 2, c: 3 }, a = [10, 20, 30], o2 = { }, a2 = [];
({ a: o2.A, b: o2.B, c: o2.C } = o)  // object => object
console.log(o2); // { A: 1, B: 2, C: 3 }
[a2[2], a2[1], a2[0]] = a  // array => array
console.log(a2); // [30, 20, 10]
({ a: a2[0], b: a2[1], c: a2[2] } = o) // object => array
console.log(a2); // [1, 2, 3]
[o2.A, o2.B, o2.C] = a // array => object
console.log(o2) // { A: 10, B: 20, C: 30 }
  #+END_SRC
- *Spread/gather object/array destructuring**
  #+BEGIN_SRC js
const { a, ...x } = o
console.log(a, x, { a, ...x }) // 1 { b: 2, c: 3 } { a: 1, b: 2, c: 3 }
const [x, ...y] = a
console.log(x, y, [x, ...y]) // 10, [ 20, 30 ], [ 10, 20, 30 ]
  #+END_SRC
- *Default values destructuring* vs default parameters
  #+BEGIN_SRC js
const { a: p, d: s = 0 } = o
console.log(p, s) // 1, 0
const [p, q, r, s = 0] = a
console.log(p, q, r, s) // 10, 20, 30, 0
f({ x = 10 } = { }, { y } = { y: 10 }) { ... }
  #+END_SRC

** Modules, `export`, `import`

- *Modules* static, resolved at compile-time, read-only, *one-way live bindings
  to exported values*, not copies. One module per file, module is a *cached
  singleton*, there is no global scope inside a module, =this= is =undefined=
  inside a module, *circular imports* are correctly handled regardless of the
  =import= order
- *Module identifier* is a constant string in the form of
  - Relative path ~"../module.js"~
  - Absolute path ~"/module.js"~
  - Module path ~"core/module"~
  = Module URL ~"https://module.js"~
- Export (not exported objects are *private* to the module)
    - *Named exports** src_js{ export var | const | let | function | class | {
      a, b as B } } of (re)named objects defined in a module
    - *Default export* src_js{ export default { a, b } } or src_js{ export { a
      as default } } not mutually exclusive with the named exports src_js{
      import defaultExport, { named } from "module" } that rewards with a
      simpler src_js{ import defaultExport } syntax. Default export is unnamed
      and can be imported under any name e.g. =defaultExport=
    - *Re-export* from another module src_js{ export * | { a, b as B } from
      "module" }
- Import (all imported bindings are *immutable* and hoisted)
    - *Named import* src_js{ import { a, b as B } from "module" } binds to the
      top-level identifiers in the current scope
    - *Default import* src_js{ import defaultExport | { default as defaultExport
      } from "module" }
    - *Wildcard import* to a single namespace src_js{ import * as ns from
      "module" }
- *Dynamic async import* src_js{ import("module") // Promise } at runtime

** Iterator closure and iterable interface ~[Symbol.iterator]~

- *Iterator closure* iterates over arrays through indexing and objects
  properties. Ordered, sequential, pull-based consumption of data src_js{
  iterator = { next() => { value, done } } } closure over iterator state through
  interface of ~for/of~
  #+BEGIN_SRC js
const a = [1, 2]
for (let i = 0; i < a.length; ++i) { console.log(a[i]) } // 1, 2
for (const e of a) { console.log(e) } // 1, 2
const o = { a: 1, b: 2 }
for (const p in o) { console.log(p, o[p]) } // a, 1, b, 2
Object.defineProperty(o, Symbol.iterator, {
  writable: false, enumerable: false, configurable: true,
  value: function() {
    const o = this
    const keys = Object.keys(o)
    let i = 0 // iterator state
    function next() {
      return { value: o[keys[i++]], done: (i > keys.length) }
    }
    return { next }
  }
})
for (const e of o) { console.log(e) } // 1, 2
  #+END_SRC
- *Iterable interface* src_js{ iteratble = { [Symbol.iterator]() { return {
  next() } } } } returns an iterator
  #+BEGIN_SRC js
function iterator(n) { // iterator configuration
  let i = 0; // iterator state
  const next = () => ({ value: i < n ? i : undefined, done: ++i > n })
  // iterable object + iterator function
  return { [Symbol.iterator]() { return this }, next }
}
for (const i of iterator(3)) { console.log(i) } // 0, 1, 2
  #+END_SRC
- *Array destructuring* src_js{ [a, b] = it } and the spread operator src_js{
  f(...it) } can consume an iterator

** Metaprogramming

- =Proxy= + =Reflect= intercepts at the proxy, extends in the proxy and forwards
  to the target object =get=, =set=, =delete=, =apply=, =construct= operations
  among others
- *Proxy first* design pattern
  #+BEGIN_SRC js
const o = { a: 1 }
const handlers = {
  get(target, key, context) {
    if (Reflect.has(target, key)) {
      console.log("get key", key)
      // forward operation from context (proxy) to target (object)
      return Reflect.get(target, key, context)
    } else {
      throw new Error(`${key} does not exist`)
    }
  }
}
const p = new Proxy(o, handlers)
console.log(p.a) // get key a, 1
  #+END_SRC
- *Proxy last* design pattern
  #+BEGIN_SRC js
const o = { a: 1 }
const handlers = {
  get(target, key, context) { throw new Error(`${key} does not exits`) }
}
const p = new Proxy(o, handlers)
Object.setPrototypeOf(o, p)
console.log(o.a, o.b) // 1, Error
  #+END_SRC
- *Tail-call optimization* (TCO)
  #+BEGIN_SRC js
function rmap(a, f = e => e, r = []) {
  if (a.length > 1) {
    const [h, ...t] = a
    return rmap(t, f, r.concat(f(h)))
  } else {
    return r.concat(f(a[0]))
  }
}
const a = new Array(9999)
console.log(rmap(a.fill(0), e => e + 1)) // Maximum call stack size exceeded
  #+END_SRC
- *Trampoline* converts recursion => loop
  #+BEGIN_SRC js
function trampoline(f) { // factors out recursion into loop
  // stack depth remains constant (stack frames are reused)
  while (typeof f === "function") { f = f() }
  return f
}
function tmap(a, f = e => e, r = []) {
  if (a.length > 1) {
    // no recursive call to tmap(), just return the partial() function
    return function partial() { // executed by trampoline
      const [h, ...t] = a
      return tmap(t, f, r.concat(f(h)))
    }
  } else {
    return r.concat(f(a[0]))
  }
}
const a = new Array(9999)
console.log(trampoline(tmap(a.fill(0), e => e + 1))) // no RangeError
  #+END_SRC

* Async JavaScript

** Callback

- *Single-threaded event loop* the sequential execution *run to completion** on
  every tick
  #+BEGIN_SRC js
const events = [] // queue (FIFO)
while(true) {
  if (events.length > 0) { // tick
    const event = events.shift()
    try { event() } // atomic unit of work run to completion
    catch (e) { console.error(e) }
  }
}
  #+END_SRC
- *Concurrency* splits two or more compound tasks into atomic steps, schedules
  steps from all tasks to the event loop (interleave steps from different
  tasks), executes steps in the event loop in order to progress simultaneously
  on all tasks
- *Callback* provides the strict separation between now (the current code) and
  later (callback, the control delegation). Non-linear definition of a
  sequential control flow and error handling, *trust issues due to the control
  delegation* and to the *inversion of control* (continuations). A thrown error
  is *not automatically propagated* through the chain of callbacks. =throw= is
  not usable with callbacks
  #+BEGIN_SRC js
function timeoutify(f, timeout) {
  const id = setTimeout(() => {
    id = null; f(new Error("timeout"))
  }, timeout)
  return (...args) => {
    if (id) { clearTimeout(id); f(null, ...args) }
  }
}
function f(e, v) { e ? console.error(e) : console.log(v) }
const tf = timeoutify(f, 200)
setTimeout(() => tf(1), 100) // 1
  #+END_SRC
- Callback testing
  #+BEGIN_SRC js
export function f(v, done) {
  setTimeout(() => v ? done(null, v) : done(new Error("oh")), 200)
}
f(true, console.log) // null, true, control delegation = trust issue
f(false, console.error) // oh
describe("f", () => {
  test("success", () => new Promise(done =>
    f(true, (e, v) => { expect(v).toBe(true); done() })
  ))
  test("failure", () => new Promise(done =>
    f(false, (e, v) => { expect(e.message).toBe("oh"); done() })
  ))
})
  #+END_SRC

** Promise

- *Promise* a placeholder/proxy for a *future eventual value** trustable,
  composable, time consistent, that is *guaranteed to be always async**. The
  =resolve= and =reject= callabcks are guaranteed to be invoked *async at most
  once and exclusively* either one or the other, even if a Promise is resolved
  sync with a value, even if ~then()~ is called on an already settled Promise
  #+BEGIN_SRC js
Promise.resolve(1).then(console.log) // next tick
console.log(2) // 2, 1
  #+END_SRC
- *Promise* provides the *async composable flow control**. Multiple consumers
  subscribe to a completion event of a producer that separates consumers from a
  producer
- *Thrown error* in either =resolve= or =reject= callback is *automatically
  propagated* through the chain of promises as a rejection. =throw= is usable
  with Promises
- Once a pending promise is settled, a *resolved value* or a *rejected error*
  becomes *immutable*. Repeated calls to ~resolve()~ and ~reject()~ are ignored.
  A promise *must be returned* to form a valid promise chain
  #+BEGIN_SRC js
function timeout(timeout) {
  return new Promise((_, reject) =>
    setTimeout(() => reject("timeout"), timeout)
  )
}
function f(x, timeout) {
  return new Promise(resolve =>
    setTimeout(() => resolve(x), timeout)
  )
}
Promise.race([f(1, 400), timeout(500)])
  .then(console.log).catch(console.error) // 1
  #+END_SRC
- *Promises solve the trust issues* of callbacks by *inverting the callback
  control delegation*. Promises don't get rid of callbacks, but they *let the
  caller to control callbacks locally* via the ~p.then(cb)~ instead of passing
  callabcks to the third party code as in the case of callbacks only approach
- ~Promise.resolve(x)~ normilizes values and misbehaving thenables to trustable
  and compliant promises
- ~p.then()~ automatically and synchronously *creates a new Promise in a
  chain* either resolved with the value or rejected with an error
  #+BEGIN_SRC js
Promise.resolve(1)
  .then(x => x + 1)
  .then(x => new Promise(resolve => setTimeout(() => resolve(x * 2), 100)))
  .then(console.log) // 4
  #+END_SRC
- ~p.catch()~ rejection restores the Promise chain back to normal
  #+BEGIN_SRC js
Promise.resolve(1)
  // default rejection handler: e => { throw e } for the incoming errors
  .then(() => { throw new Error("oh") })
  // default resolution handler: v => { return v } for the incoming values
  .catch(e => { console.error(e.message); return 2 }) // for outgoing errors
  .then(console.log) // oh, 2 (back to normal)
  #+END_SRC
- Promise testing
  #+BEGIN_SRC js
export function f(v) {
  return new Promise((resolve, reject) =>
    setTimeout(() => v ? resolve(v) : reject(new Error("oh")), 200)
  )
}
f(true).then(console.log) // true, caller controls, no trust issues
f(false).catch(console.error) // oh
describe("f", () => {
  test("success", () =>
    f(true).then(v => expect(v).toBe(true))
  )
  test("failure", () =>
    f(false).catch(e => expect(e.message).toBe("oh"))
  )
})
  #+END_SRC
- ~Promise.all([Promise])~ a gate that resolves with an array of all
  concurrently resolved promises or rejects with the first rejected promise
- ~Promise.race([Promise])~ a latch that either resolves or rejects with the
  first settled promise. The other Promises cannot be canceled due to
  immutability, hence are settled and just ignored
- Promises API
    - src_js{ new Promise((resolve, reject) => {...}) }
    - src_js{ Promise.resolve(x) }, src_js{ Promise.reject(x) }
    - src_js{ p.then(success, [failure]) }, src_js{ p.catch(failure) }, src_js{
      p.finally(always) }
    - src_js{ Promise.all([]) => [all success] | first failure }
    - src_js{ Promise.allSettled([]) => [all success | failure] }
    - src_js{ Promise.race([]) => first success | first failure }
    - src_js{ Promise.any([]) => first success | all failures }
- Callback => Promise = converts a callback-based function into a
  promise-returning function
  #+BEGIN_SRC js
function f(v, done) {
  setTimeout(() => v ? done(null, v) : done(new Error("oh")), 200)
}
function promisify(f) {
  return function(...args) {
    return new Promise((resolve, reject) => {
      args = [...args, (e, v) => e ? reject(e) : resolve(v)]
      f(...args)
    })
  }
}
const ff = promisify(f)
ff(true).then(console.log) // true
ff(false).catch(console.error) // oh
  #+END_SRC
- Sequential composition of promises
  #+BEGIN_SRC js
function f(v) { return new Promise(
  resolve => setTimeout(() => resolve(v + 1), 100)
)}
const p = [f, f].reduce((p, f) => p.then(f), Promise.resolve(1))
p.then(console.log) // 3
let r = 1
for (const ff of [f, f]) { r = await ff(r) }
console.log(r) // 3
  #+END_SRC

** Generators

- *Generator* is a new type of function that *does not run to completion** as a
  regular function does, but *creates an iterator that controls execution of the
  generator**, *suspends maintaining the internal state* at every =yield= and
  resumes on each iteration call to ~it.next()~. =yield= is the
  right-associative like ~=~ and ~?:~
- Generator use cases
    - On demand production of series of values through the iteration maintaining
      the internal state
    - Async flow control through the two-way message passing
- *Two-way message passing**
    - *Generator* src_js{ const y = yield x } yields =x= to the caller before
      suspending and receives =y= from the caller after resuming
    - *Caller* `src_js{ const { value: x } = it.next(y) } receives =x= from a
      suspended generator, resumes the generator and passes =y= into the
      generator
- Generator implements the *cooperative multitasking* by yielding control, not
  preemptive multitasking by external context switch. A generator suspends
  itself via =yield=, the iterator call ~it.next()~ resumes the generator
  #+BEGIN_SRC js
function* g(x) {
  console.log(x++)
  // yield waits for a value passed by it.next(v)
  const y = yield "a" // yield requires 2 iterations: start + resume
  console.log(y, x) // implicitly returns undefined
}
const it = g(1) // creates a generator + receives an interator
// starts the generator (must always be empty)
const { value } = it.next() // 1
console.log(value) // a
// resumes the generator + passes message to the generator
const r = it.next("b") // b, 2
console.log(r) // { value: undefined, done: true }
  #+END_SRC
- Initial ~it.next()~ + =yield= + message ~it.next(v)~
  #+BEGIN_SRC js
function* g() {
  const a = yield "a"
  const b = yield "b"
  console.log(a, b)
}
const it = g() // creates a controlling iterator
const { value: a } = it.next() // starts the generator, must always be empty
const { value: b } = it.next(1)
it.next(2) // 1, 2 (finishes the generator)
console.log(a, b) // a, b
  #+END_SRC
- *Early termination* via =break=, =return=, =throw= from the =for/of= loop
  automatically terminates the generator's iterator, or manually via
  ~it.return()~ or ~it.throw()~
  #+BEGIN_SRC js
function* g(n) {
  let i = 0
  while (i < n) { yield i++ }
}
for (const el of g(3)) { console.log(el) } // 0, 1, 2

const infinite = function*() {
  let v = 0
  try { while (true) { yield v++ } }
  finally { console.log("finally") }
}
const inf = infinite()
for (const i of inf) {
  if (i > 1) {
    const { value } = inf.return("return")
    console.log(value)
  }
  console.log(i) // 0, 1, finally, return, 2
}
  #+END_SRC
- Generator expresses the *async flow control* in the sequential, sync-like form
  through the async iteration of a generator
  #+BEGIN_SRC js
function f(v, done) {
  setTimeout(() => v ? done(null, v) : done(new Error("oh")), 200)
}
function done(e, v) { if (e) { gen.throw(e) } else { gen.next(v) } }
function* g() {
  try {
    const a = yield f(true, done)
    console.log(a)
    const _ = yield f(false, done)
  } catch (e) { console.error(e.message) }
}
const gen = g()
gen.next() // true, oh
  #+END_SRC
- *Promise-yielding generator* is the basis for =async/await=
  #+BEGIN_SRC js
function f(v) {
  return new Promise((resolve, reject) =>
    setTimeout(() => v ? resolve(v) : reject(new Error("oh")), 200)
  )
}
function* g() {
  try {
    const a = yield f(true)
    console.log(a)
    const _ = yield f(false)
  } catch (e) { console.error(e.message) }
}
const gen = g()
gen.next().value.then(x => gen.next(x).value.then(y => gen.next(y)))
  .catch(e => console.log(e.message)) // true, oh
  #+END_SRC
- =yield*= delegates for the *composition of generators*. =yield*= requires an
  iterable ~[Symbol.iterator]~, it then invokes that iterable's iterator
  ~it.next()~ and delegates generator's control to that iterator until it is
  exhausted
  #+BEGIN_SRC js
function* inner() { yield 2; yield 3 }
function* outer() { yield 1; yield* inner(); yield 4 }
for (const el of outer()) { console.log(el) } // 1, 2, 3, 4
  #+END_SRC
- *Error handling* =try/catch= inside and outside of generators
  #+BEGIN_SRC js
function* g() {
  try { yield 1 }
  catch (e) { console.error("inside", e.message) } // inside uh
  throw new Error("oh")
}
const gen = g()
try {
  const { value } = gen.next()
  console.log(value) // 1, inside uh, outside oh
  gen.throw(new Error("uh"))
} catch (e) { console.error("outside", e.message) } // outside oh
  #+END_SRC

** Testing (bun test)

- *Run tests* in the =*.test.js= files
  #+BEGIN_SRC fish
bun test --coverage file.test.js -t reTest
  #+END_SRC
- Suites, tests, *life cycle hooks*, *assertions*
  #+BEGIN_SRC js
// The bun transpiler automatically injected the import
// There is no need for the explicit import
import { describe, test, expect } from "bun:test"
import { beforeAll, beforeEach, afterAll, afterEach } from "bun:test"
import { spyOn, mock } from "bun:test"
describe("assertions suite", () => { // test suite, new testing context
  // describe scope, top level file scope, --preload ./setup.js all files scope
  beforeAll(() => console.log("before all"))
  afterAll(() => console.log("after all"))
  // test scope
  beforeEach(() => console.log("before each"))
  afterEach(() => console.log("after each"))
  test("assertions test", () => { // nested local testing context
    const o = { a: 1 }, o2 = o
    expect(1).toBe(1) // primitive values via Object.is()
    expect(o).toBe(o2) // same object reference via Object.is()
    expect(0.1 + 0.2).not.toBe(0.3) // rounding error
    expect(0.1 + 0.2).toBeCloseTo(0.3, 5) // float point assertion
    expect(typeof 1).toBe("number") // type assertion
    expect(new Number(1) instanceof Number).toBe(true) // instance assertion
    expect(o).not.toBe({ a: 1 }) // not the same object reference
    expect(o).toEqual({ a: 1 }) // recursive content for object/array
    expect(() => { throw new Error("oh") }).toThrow(/oh/) // error function
  })
})
  #+END_SRC
- *Promise testing*, *async testing*
  #+BEGIN_SRC js
describe("promise", () => {
  function task(v) {
    return new Promise((resolve, reject) =>
      setTimeout(() => v ? resolve(v) : reject(new Error("oh")), 100)
    )
  }
  test("promise then/catch", () => {
    task(1).then(v => expect(v).toBe(1))
    task(0).catch(e => expect(e.message).toBe("oh"))
  })
  test("promise async/await", async () => {
    const v = await task(1)
    expect(v).toBe(1)
    expect(async () => await task(0)).toThrow(/oh/)
    try { await task(0) }
    catch(e) { expect(e.message).toBe("oh") }
  })
  // .resolves/.rejects unwraps a Promise value/error to apply sync assertions
  // However, all assertions now return a Promise, hence => await expect(...)
  test("resolves", async () => await expect(task(1)).resolves.toBe(1))
  test("rejectrs", async () => await expect(task(0)).rejects.toThrow(/oh/))
})
  #+END_SRC
- *Parameterized tests*
  #+BEGIN_SRC js
describe("parameterized", () => {
  test.each([
    [1, 2, 3], [4, 5, 9]
  ])("array sum(%i, %i) === %i", (a, b, exp) => // positional arguments
    expect(a + b).toBe(exp)
  )
  test.each([
    { a: 1, b: 2, exp: 3 }, { a: 4, b: 5, exp: 9 }
  ])("object sum($a, $b) === $exp", ({ a, b, exp }) => // object destructuring
    expect(a + b).toBe(exp)
  )
})
  #+END_SRC
- Test context
  #+BEGIN_SRC js
    describe("test context", () => {
      beforeEach(ctx => ctx.n = 10) // set up a test local context
      afterEach(ctx => delete ctx.n) // tear down a test local context
      test("context setup", ctx => expect(ctx.n + 1).toBe(11))
      test("context reset", ({ n }) => expect(n - 1).toBe(9))
    })
  #+END_SRC
- Spies and mocks
  #+BEGIN_SRC js
describe("spies and mocks", () => {
  afterAll(() => mock.restore()) // restore all mocked functions, not modules
  // const o = { f: function(a) { return a + 1 } }
  const o = { f(a) { return a + 1 } }
  // const o = { f: a => a + 1 }
  test("spy on a method", () => {
    const fSpy = spyOn(o, "f") // spy on the original implemention
    expect(o.f(10)).toBe(11)
    expect(fSpy).toHaveBeenCalledWith(10)
    expect(fSpy).toHaveReturnedWith(11)
    fSpy.mockImplementation(a => a + 2) // add the mock implemention to the spy
    expect(o.f(10)).toBe(12)
    expect(fSpy).toHaveBeenNthCalledWith(2, 10)
    expect(fSpy).toHaveNthReturnedWith(2, 12)
  })
  test("mock a function", () => {
    const fMock = mock(a => a - 1) // define a mocked implementation
    expect(fMock(10)).toBe(9)
    expect(fMock).toHaveBeenNthCalledWith(1, 10)
    expect(fMock).toHaveNthReturnedWith(1, 9)
  })
  test("mock a module", async () => {
    mock.module("./module", () => { // mock a module with an object
      return { a: 1 }
    })
    const m = await import("./module")
    expect(m.a).toBe(1)
  })
})
  #+END_SRC
